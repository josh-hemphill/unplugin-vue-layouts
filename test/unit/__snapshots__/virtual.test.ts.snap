// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`createVirtualModuleCode > generates code with default layout 1`] = `
"
    

    /**
     * @param {Router} router
     * @param {boolean} [withLayout=false]
     * @returns {import('vue-router').RouteRecordRaw[] | (() => import('vue-router').RouteRecordRaw[])}
     */
    export function createGetRoutes(router, withLayout = false) {
      const routes = router.getRoutes()
      if (withLayout) {
        return routes
      }
      return () => routes.filter(route => !route.meta?.isLayout)
    }

    /**
     * @param {import('vue-router').RouteRecordRaw[]} routes
     * @returns {import('vue-router').RouteRecordRaw[]}
     */
    export function setupLayouts(routes) {
      /** @type {Record<string, any>} */
      const layouts = {}

      const modules = import.meta.glob("/layouts/**/*.vue", { eager: true })

      Object.entries(modules).forEach(([name, module]) => {
        let key = name.replace("/layouts/", '').replace('.vue', '')
        layouts[key] = module.default
      })

      /**
       * @param {import('vue-router').RouteRecordRaw[]} lRoutes
       * @param {boolean} [top=true]
       * @returns {import('vue-router').RouteRecordRaw[]}
       */
      function deepSetupLayout(lRoutes, top = true) {
        return lRoutes.map(route => {
          // Process children first
          if (route.children?.length > 0) {
            route.children = deepSetupLayout(route.children, false)
          }

          // Skip if already processed
          if (route.meta?.isLayout) {
            return route
          }

          const layout = route.meta?.layout ?? 'default'

          
          
          if (layout && layouts[layout]) {
            
            // Create a new route with the layout as the component
            /** @type {import('vue-router').RouteRecordRaw} */
            const layoutRoute = {
              path: route.path,
              component: layouts[layout],
              meta: { ...route.meta, isLayout: true },
              // Handle root path specially to avoid infinite nesting
              children: top && route.path === '/' 
                ? [route] 
                : [{ ...route, path: '', meta: { ...route.meta, isLayout: false } }]
            }
            return layoutRoute
            
          }

          return route
        })
      }

      return deepSetupLayout(routes)
    }
  "
`;

exports[`createVirtualModuleCode > generates code with top level route layout skipping 1`] = `
"
    

    /**
     * @param {Router} router
     * @param {boolean} [withLayout=false]
     * @returns {import('vue-router').RouteRecordRaw[] | (() => import('vue-router').RouteRecordRaw[])}
     */
    export function createGetRoutes(router, withLayout = false) {
      const routes = router.getRoutes()
      if (withLayout) {
        return routes
      }
      return () => routes.filter(route => !route.meta?.isLayout)
    }

    /**
     * @param {import('vue-router').RouteRecordRaw[]} routes
     * @returns {import('vue-router').RouteRecordRaw[]}
     */
    export function setupLayouts(routes) {
      /** @type {Record<string, any>} */
      const layouts = {}

      const modules = import.meta.glob("/layouts/**/*.vue", { eager: true })

      Object.entries(modules).forEach(([name, module]) => {
        let key = name.replace("/layouts/", '').replace('.vue', '')
        layouts[key] = module.default
      })

      /**
       * @param {import('vue-router').RouteRecordRaw[]} lRoutes
       * @param {boolean} [top=true]
       * @returns {import('vue-router').RouteRecordRaw[]}
       */
      function deepSetupLayout(lRoutes, top = true) {
        return lRoutes.map(route => {
          // Process children first
          if (route.children?.length > 0) {
            route.children = deepSetupLayout(route.children, false)
          }

          // Skip if already processed
          if (route.meta?.isLayout) {
            return route
          }

          const layout = route.meta?.layout ?? 'default'

          
          // unplugin-vue-router adds a top-level route to the routing group, which we should skip (ref: https://github.com/JohnCampionJr/vite-plugin-vue-layouts/issues/134)
          /** @type {boolean} */
          const skipLayout = top && !route.component && route.children?.find(r => (r.path === '' || r.path === '/') && r.meta?.isLayout)
          if (skipLayout) {
            return route
          }
        
          
          if (layout && layouts[layout]) {
            
            // Create a new route with the layout as the component
            /** @type {import('vue-router').RouteRecordRaw} */
            const layoutRoute = {
              path: route.path,
              component: layouts[layout],
              meta: { ...route.meta, isLayout: true },
              // Handle root path specially to avoid infinite nesting
              children: top && route.path === '/' 
                ? [route] 
                : [{ ...route, path: '', meta: { ...route.meta, isLayout: false } }]
            }
            return layoutRoute
            
          }

          return route
        })
      }

      return deepSetupLayout(routes)
    }
  "
`;

exports[`createVirtualModuleCode > generates code with wrapped components 1`] = `
"
    import { h, defineAsyncComponent } from 'vue'

    /**
     * @param {Router} router
     * @param {boolean} [withLayout=false]
     * @returns {import('vue-router').RouteRecordRaw[] | (() => import('vue-router').RouteRecordRaw[])}
     */
    export function createGetRoutes(router, withLayout = false) {
      const routes = router.getRoutes()
      if (withLayout) {
        return routes
      }
      return () => routes.filter(route => !route.meta?.isLayout)
    }

    /**
     * @param {import('vue-router').RouteRecordRaw[]} routes
     * @returns {import('vue-router').RouteRecordRaw[]}
     */
    export function setupLayouts(routes) {
      /** @type {Record<string, any>} */
      const layouts = {}

      const modules = import.meta.glob("/layouts/**/*.vue", { eager: false })

      Object.entries(modules).forEach(([name, module]) => {
        let key = name.replace("/layouts/", '').replace('.vue', '')
        layouts[key] = module
      })

      /**
       * @param {import('vue-router').RouteRecordRaw[]} lRoutes
       * @param {boolean} [top=true]
       * @returns {import('vue-router').RouteRecordRaw[]}
       */
      function deepSetupLayout(lRoutes, top = true) {
        return lRoutes.map(route => {
          // Process children first
          if (route.children?.length > 0) {
            route.children = deepSetupLayout(route.children, false)
          }

          // Skip if already processed
          if (route.meta?.isLayout) {
            return route
          }

          const layout = route.meta?.layout ?? 'default'

          
          
          if (layout && layouts[layout]) {
            
            if (!route.component) {
              return route
            }
            /** @type {import('vue-router').RouteRecordRaw} */
            const wrappedRoute = {
              ...route,
              component: h('div', [
                h(layouts[layout]),
                h(defineAsyncComponent(() => route.component())),
              ]),
              meta: {
                ...route.meta,
                isLayout: true
              }
            }
            return wrappedRoute
            
          }

          return route
        })
      }

      return deepSetupLayout(routes)
    }
  "
`;
